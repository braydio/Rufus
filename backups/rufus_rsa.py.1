# rufus_rsa.py
import discord
import os
import logging
import asyncio
import aiohttp
import re
import sys
import time
import traceback
import schedule
import threading
from dotenv import load_dotenv

from rsa.session_tracker import RSASessionManager
from rsa.watchlist_manager import RufusWatchlistManager
from prompt_setup import SYSTEM_PROMPT, REFORMAT_PROMPT, SUMMARY_PROMPT

# Load environment variables
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
AI_API_URL = os.getenv("API_URL", "http://localhost:5051/v1/chat/completions")
TARGET_CHANNEL_ID = os.getenv("ANNOUNCE_CHANNEL_ID")
SYSTEM_PROMPT_FILE = os.getenv("SYSTEM_PROMPT_FILE", "system_prompt.txt")
REFORMAT_PROMPT_FILE = os.getenv("REFORMAT_PROMPT_FILE", "reformat_prompt.txt")
SUMMARY_PROMPT_FILE = os.getenv("SUMMARY_PROMPT_FILE", "summary_prompt.txt")


LOG_TO_FILE = os.getenv("LOG_TO_FILE", "false").lower() == "true"
LOG_FILE_PATH = os.getenv("LOG_FILE_PATH", "chat_logs.txt")


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)
logger = logging.getLogger("RufusBot")

# Discord setup
intents = discord.Intents.default()
intents.message_content = True
bot = discord.Client(intents=intents)

# RSA session tracker
rsa_tracker = RSASessionManager()
rwatch = RufusWatchlistManager()

# Memory buffer (for conversation history)

memory_buffer = defaultdict(list)  # key = user_id or channel_id
active_trades = {}
MAX_MEMORY_LENGTH = 40
MAX_DISCORD_LENGTH = 2000


async def post_daily_summary():
    summaries = rwatch.log_and_get_summary()
    channel = bot.get_channel(int(TARGET_CHANNEL_ID))
    if channel:
        for msg in summaries:
            await channel.send(f"📊 {msg}")


def schedule_loop(loop):
    schedule.every().day.at("08:45").do(
        lambda: asyncio.run_coroutine_threadsafe(post_daily_summary(), loop)
    )
    schedule.every().day.at("16:30").do(
        lambda: asyncio.run_coroutine_threadsafe(post_daily_summary(), loop)
    )
    while True:
        schedule.run_pending()
        time.sleep(60)


# Utility logging
def log_to_file(user, prompt, response, note=None):
    if LOG_TO_FILE:
        with open(LOG_FILE_PATH, "a", encoding="utf-8") as f:
            f.write(f"\n---\nUser: {user}\n")
            if note:
                f.write(f"Note: {note}\n")
            f.write(f"Prompt: {prompt}\nResponse: {response}\n")


async def query_chat_completion(messages):
    payload = {
        "messages": messages,
        "temperature": 0.7,
        "max_tokens": 600,
        "stream": False,
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(AI_API_URL, json=payload, timeout=160) as resp:
                if resp.status != 200:
                    logger.error(f"❌ Chat API error: {resp.status}")
                    return "Sorry, something went wrong talking to the AI."
                result = await resp.json()
                return result["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logger.error(f"❌ API call failed: {e}")
        return "Sorry, something went wrong talking to the AI."


async def reformat_query(user_input):
    payload = {
        "messages": [
            {"role": "system", "content": REFORMAT_PROMPT},
            {"role": "user", "content": user_input},
        ],
        "temperature": 0.3,
        "max_tokens": 150,
        "stream": False,
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(AI_API_URL, json=payload, timeout=160) as resp:
                if resp.status != 200:
                    return user_input
                result = await resp.json()
                reformatted = result["choices"][0]["message"]["content"].strip()
                logger.info(f"🔧 Reformatted prompt: {reformatted}")
                log_to_file("SYSTEM", user_input, reformatted, note="Reformatted Query")
                return reformatted
    except:
        return user_input


@bot.event
async def on_ready():
    logger.info(f"✅ Logged in as {bot.user}")
    await asyncio.sleep(1)
    channel = bot.get_channel(TARGET_CHANNEL_ID)
    if channel:
        logger.info(f"Confirmed channel as {TARGET_CHANNEL_ID}")
        await channel.send(
            "🤖 Rufus is online and ready to go! Type `..ai` to ask me anything."
        )
        logger.info(f"📣 Announced ready in #{channel.name}")


@bot.event
async def on_message(message):
    global memory_buffer

    content = message.content.lower()
    logger.info(f"📩 New message received: {message.content[:80]}")

    if content.startswith("..summary"):
        logger.info("📝 Manual summary request triggered.")
        summaries = rwatch.log_and_get_summary()
        for msg in summaries:
            await message.channel.send(f"📊 {msg}")
        return

    if "split date" in content and "watchlist" in content:
        logger.info("🔍 Attempting to parse split date from watchlist message.")
        match = re.search(
            r"\*\*\|\s*([A-Z]+)\*\*.*?(\d{4}-\d{2}-\d{2})", message.content
        )
        if match:
            ticker, split_date = match.group(1), match.group(2)
            added = rwatch.add(ticker, split_date)
            logger.info(
                f"👁️ Added to watchlist: {ticker} | Split date: {split_date} | New: {added}"
            )
            if added:
                await message.channel.send(
                    f"👀 Tracking `{ticker}` for {split_date} split."
                )
        return

    match = re.match(r"!rsa (buy|sell) (\d+)? ?([A-Z]+)", content)
    if match:
        action, qty, ticker = match.groups()
        ticker = ticker.upper()
        active_trades[ticker] = True
        logger.info(f"🟢 {action.upper()} activity initiated for {ticker}")
        await message.channel.send(f"🟢 Monitoring broker fills for `{ticker}`.")
        return

    buy_match = re.search(r"(\w+)\s+(\d): buying .* of ([A-Z]+)", content)
    if buy_match:
        broker, acct, ticker = buy_match.groups()
        ticker = ticker.upper()
        acct_id = f"{broker}:{acct}"
        if ticker in active_trades:
            rwatch.mark_purchase(ticker, acct_id)
            logger.info(f"💸 Purchase logged: {ticker} | Account: {acct_id}")
        return

    match = re.match(r"all (\w+) transactions complete", content)
    if match:
        broker = match.group(1)
        to_remove = []
        logger.info(f"🔴 Processing transaction completion for broker: {broker}")
        for ticker in list(active_trades):
            for acct in rwatch.watchlist.get(ticker, {}).get("purchases", []):
                if acct.lower().startswith(broker.lower()):
                    rwatch.mark_closeout(ticker, acct)
                    logger.info(f"✅ Closeout recorded: {ticker} | Account: {acct}")
            to_remove.append(ticker)
        for ticker in to_remove:
            del active_trades[ticker]
        await message.channel.send(f"✅ Closeout activity logged for `{ticker}`.")
        return

    if content.startswith("..status"):
        logger.info("📥 Status command received.")
        parts = content.split()
        if len(parts) >= 2:
            ticker = parts[1]
            summary = rwatch.get_status(ticker)
            logger.info(f"📊 Status for {ticker} retrieved.")
            await message.channel.send(summary)
        else:
            await message.channel.send("Usage: `..status TICKER`")
        return

    if content.startswith("!rsa"):
        logger.info("🔧 RSA session tracking command received.")
        rsa_tracker.start_session(
            message.author.id,
            expected_brokers=[
                "bbae",
                "dspac",
                "fennel",
                "public",
                "schwab",
                "sofi",
                "vanguard",
                "webull",
            ],
        )
        await message.channel.send(
            "📍 Tracking this RSA session. I'll notify you if any brokers are missed."
        )
        return

    match = re.match(r"all (\w+) transactions complete", content)
    if match:
        rsa_tracker.mark_broker_complete(message.author.id, match.group(1))
        logger.info(f"✅ Broker marked complete: {match.group(1)}")
        return

    if "all commands complete in all brokers" in content:
        rsa_tracker.mark_all_done(message.author.id)
        summary = rsa_tracker.get_status(message.author.id)
        logger.info("📦 All broker commands complete. Summary sent.")
        await message.channel.send(f"📊 RSA session summary:\n```\n{summary}\n```")
        return

    err_match = re.search(r"(?:error.*order.*(?:for|on)) (\w+)", content)
    if err_match:
        rsa_tracker.mark_error(message.author.id, err_match.group(1), message.content)
        logger.warning(f"⚠️ Error logged for broker: {err_match.group(1)}")
        return

    if message.channel.id != TARGET_CHANNEL_ID or not message.content.startswith(
        "..ai"
    ):
        return

    logger.info(f"🟡 AI query received from {message.author.display_name}")
    thinking_task = None

    async def thinking_loop(channel):
        idx = 0
        thinking_messages = [
            "Heh...",
            "Well erm...",
            "Okay so...",
            "Hold on...",
            "Uhh...",
            "Thinking...",
        ]
        msg = await channel.send(thinking_messages[0])
        try:
            while True:
                await asyncio.sleep(5)
                idx += 1
                await msg.edit(content=thinking_messages[idx % len(thinking_messages)])
        except asyncio.CancelledError:
            try:
                await msg.delete()
            except:
                pass

    try:
        thinking_task = asyncio.create_task(thinking_loop(message.channel))
        raw_query = message.content[len("..ai") :].strip()
        reformatted_query = await reformat_query(raw_query)

        chat_messages = (
            [{"role": "system", "content": SYSTEM_PROMPT}]
            + memory_buffer
            + [
                {
                    "role": "user",
                    "content": f"{message.author.display_name}: {reformatted_query}",
                }
            ]
        )

        response = await query_chat_completion(chat_messages)

        if thinking_task:
            thinking_task.cancel()
            try:
                await thinking_task
            except:
                pass

        if len(response) > MAX_DISCORD_LENGTH:
            for i in range(0, len(response), MAX_DISCORD_LENGTH):
                await message.channel.send(response[i : i + MAX_DISCORD_LENGTH])
        else:
            await message.channel.send(response)

        if response != "Sorry, something went wrong talking to the AI.":
            log_to_file(
                message.author.display_name,
                reformatted_query,
                response,
                note="Final Response",
            )

            summary_prompt = [
                {"role": "system", "content": SUMMARY_PROMPT},
                {"role": "user", "content": response},
            ]
            summarized_response = await query_chat_completion(summary_prompt)

            memory_buffer.append(
                {
                    "role": "user",
                    "content": f"{message.author.display_name}: {raw_query}",
                }
            )
            memory_buffer.append(
                {"role": "assistant", "content": f"Rufus: {summarized_response}"}
            )

            if len(memory_buffer) > MAX_MEMORY_LENGTH:
                memory_buffer = memory_buffer[-MAX_MEMORY_LENGTH:]

            log_to_file(
                "SYSTEM", "Summary Prompt", summarized_response, note="Memory Summary"
            )

    except Exception as e:
        logger.error(f"❌ Error in on_message: {e}")


if __name__ == "__main__":
    try:
        bot.run(TOKEN)
    except Exception as e:
        loop = asyncio.get_event_loop()
        threading.Thread(target=schedule_loop, args=(loop,), daemon=True).start()

        print("❌ Bot startup error:")
        print(traceback.format_exc())
